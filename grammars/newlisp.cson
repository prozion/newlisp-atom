name: "Newlisp"
scopeName: "source.newlisp"
comment: '''

  		The foldings do not currently work the way I want them to. This
  		may be a limitation of the way they are applied rather than the
  		regexps in use. Nonetheless, the foldings will end on the last
  		identically indented blank line following an s-expression. Not
  		ideal perhaps, but it works. Also, the #illegal pattern never
  		matches an unpaired ( as being illegal. Why?! -- Rob Rix

  		Ok, hopefully this grammar works better on quoted stuff now.  It
  		may break for fancy macros, but should generally work pretty
  		smoothly.  -- Jacob Rus

  		I have attempted to get this under control but because of the way folding
  		and indentation interact in Textmate, I am not sure if it is possible. In the
  		meantime, I have implemented Python-style folding anchored at newlines.
  		Additionally, I have made some minor improvements to the numeric constant
  		highlighting. Next up is square bracket expressions, I guess, but that
  		should be trivial. -- ozy`

'''
fileTypes: [
  "lsp"
  "nl"
]
'firstLineMatch': '^#!\\s*/.*\\bnewlisp'
patterns: [
  {
    include: "#comment"
  }
  {
    include: "#sexp"
  }
  # {
  #   include: "#string"
  # }
  {
    include: "#language-functions"
  }
  {
    include: "#quote"
  }
  {
    include: "#constants"
  }
  {
    include: "#illegal"
  }
]
repository:
  comment:
    patterns: [
      {
        captures:
          "1":
            name: "punctuation.definition.comment.racket"
        match: "(;).*$\\n?"
        name: "comment.line.semicolon.racket"
      }
      {
        match: "#!/.+$"
        name: "comment.line"
      }
    ]
  constants:
    patterns: [
      {
        match: "\\b(true)|(false)\\b"
        name: "constant.language.boolean.racket"
      }
      {
        match: "(#:)([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)(?=[\\s\\)])"
        name: "constant.keyword.racket"
      }
      {
        match: "(?<=[\\(\\s])((#e|#i)?-?[0-9]+(\\.[0-9]+)?|(#x)[0-9a-fA-F]+|(#o)[0-7]+|(#b)[01]+)(?=[\\s;()'\",\\[\\]])"
        name: "constant.numeric.racket"
      }
    ]
  "language-functions":
    patterns: [
      {
        name: "keyword.control.racket"
        match: '''
          (?x)
          						(?<=(\\(|\\[)) # preceded by ( or \[
          						( do|else|quasiquote|begin|if-not|if|unless|when-not|when|case|set!|
          						  cond|match|
                        let|let\\*|match-let\\*?|let\\*?-values|local|parameterize|
                        unquote|unquote-splicing|delay|
          						  letrec|values|
                        or\\*?|xor|and\\*?|not|
                        syntax-case|with-syntax)
          						(?=(\\s|\\())
        '''
      }
      {
        name: "keyword.operator.arithmetic.racket"
        match: "(?<=(\\s|\\())( >=?|<=?|=|[*/+-])(?=(\\s|\\())"
        comment: '''

          						+, -, *, /, =, >, etc.

        '''
      }
      {
        name: "keyword.specialword.racket"
        match: "(?<=(\\s|\\(|\\[))(null|empty)(?=(\\s|\\)|\\]))"
      }
      {
        name: "support.function.module.racket"
        # match: "(require/typed|require|cond-require|module(\\+|\\*)?|provide|namespace-require|begin-for-syntax|lazy-require)"
        match: "(load)"
      }
      {
        name: "support.function.definition.racket"
        match: "(define-syntax-rule|define(-datatype|-struct|-values|/contract|-macro|-for-syntax|-catch|-type|-check)*|syntax-rules|syntax|defmacro|struct)"
      }
      {
        name: "support.function.general.racket"
        match: '''
          (?x)
          						(?<=(\\s|\\()) # preceded by space or (
          						(
          						  # List processing, flow control and integer arithmetic
          						  and|append|apply|args|assoc|begin|bind|bigint|case|catch|chop|clean|collect|cond|cons|constant|count|curry|def-new|define|define-macro|difference|do-until|do-while|doargs|dolist|dostring|dotimes|dotree|dup|ends-with|exists|eval|expand|extend|first|filter|find|find-all|flat|fn|for|for-all|if|index|intersect|lambda|lambda-macro|last|length|let|letex|letn|list|local|lookup|map|match|member|not|nth|or|pop|pop-assoc|push|quote|ref|ref-all|rest|replace|reverse|rotate|select|self|set|set-ref|set-ref-all|setf setq|silent|slice|sort|starts-with|swap|unify|unique|union|unless|until|when|while|

          						  # String and conversion functions
          						  address|append|bigint|bits|char|chop|dup|ends-with|encrypt|eval-string|eval-string-js|explode|extend|find|first|float|format|get-char|get-float|get-int|get-long|get-string|int|join|last|lower-case|member|name|nth|pack|parse|pop|push|regex|regex-comp|replace|rest|reverse|rotate|select|setf|slice|source|starts-with|string|sym|title-case|trim|unicode|unpack|upper-case|utf8|utf8len|

                        # Array functions
                        append|array|array-list|array?|det|first|invert|last|mat|multiply|nth|rest|setf|slice|transpose|

                        # Predicates
                        (array|atom|bigint|context|directory|empty|even|file|float|global|inf|integer|lambda|legal|list|macro|NaN|nil|null|odd|number|primitive|protected|quote|string|symbol|true|zero)\?|

                        # Date and datetime functions
                        date|date-list|date-parse|date-value|now|time|time-of-day|

                        # Pattern recognition
                        ends-with|find|find-all|match|parse|ref|ref-all|regex|replace|search|set-ref|set-ref-all|starts-with|unify|

                        # Input/output and file operations
                        append-file|close|current-line|device|exec|open|peek|print|println|read|read-char|read-file|read-key|read-line|read-utf8|save|search|seek|write|write-char|write-file|write-line|

                        # File and directory management
                        change-dir|copy-file|delete-file|directory|file-info|make-dir|real-path|remove-dir|rename-file|

                        # System functions
                        callback|catch|context|copy|debug|default|delete|env|exit|global|import|main-args|new|pretty-print|read-expr|reset|signal|sleep|struct|sym|symbols|timer|throw|throw-error|trace|trace-highlight|
          						)
          						(?=(\\s|\\(|\\))) # followed by space or ( or )

        '''
      }
    ]
  quote:
    comment: '''

      				We need to be able to quote any kind of item, which creates
      				a tiny bit of complexity in our grammar.  It is hopefully
      				not overwhelming complexity.

      				Note: the first two matches are special cases.  quoted
      				symbols, and quoted empty lists are considered constant.other


    '''
    patterns: [
      {
        captures:
          "1":
            name: "punctuation.section.quoted.symbol.racket"
        match: '''
          (?x)
          						(')\s*
          						([[:alnum:]_][[:alnum:]!$%&*+-./:<=>?@^_~]*)

        '''
        name: "constant.other.symbol.racket"
      }
      {
        captures:
          "1":
            name: "punctuation.section.quoted.empty-list.racket"
          "2":
            name: "meta.expression.racket"
          "3":
            name: "punctuation.section.expression.begin.racket"
          "4":
            name: "punctuation.section.expression.end.racket"
        match: '''
          (?x)
          						(')\s*
          						((\()\s*(\)))

        '''
        name: "constant.other.empty-list.schem"
      }
      {
        begin: "(')\\s*"
        beginCaptures:
          "1":
            name: "punctuation.section.quoted.racket"
        comment: "quoted double-quoted string or s-expression"
        end: "(?=[\\s()])|(?<=\\n)"
        name: "string.other.quoted-object.racket"
        patterns: [
          {
            include: "#quoted"
          }
        ]
      }
    ]
  "quote-sexp":
    begin: "(?<=\\()\\s*(quote)\\b\\s*"
    beginCaptures:
      "1":
        name: "keyword.control.quote.racket"
    comment: '''

      				Something quoted with (quote «thing»).  In this case «thing»
      				will not be evaluated, so we are considering it a string.

    '''
    contentName: "string.other.quote.racket"
    end: "(?=[\\s)])|(?<=\\n)"
    patterns: [
      {
        include: "#quoted"
      }
    ]
  quoted:
    patterns: [
      {
        include: "#string"
      }
      {
        begin: "(\\()"
        beginCaptures:
          "1":
            name: "punctuation.section.expression.begin.racket"
        end: "(\\))"
        endCaptures:
          "1":
            name: "punctuation.section.expression.end.racket"
        name: "meta.expression.racket"
        patterns: [
          {
            include: "#quoted"
          }
        ]
      }
      {
        include: "#quote"
      }
      {
        include: "#illegal"
      }
    ]
  sexp:
    begin: "(\\()"
    beginCaptures:
      "1":
        name: "punctuation.section.expression.begin.racket"
    end: "(\\))(\\n)?"
    endCaptures:
      "1":
        name: "punctuation.section.expression.end.racket"
      "2":
        name: "meta.after-expression.racket"
    name: "meta.expression.racket"
    patterns: [
      {
        include: "#comment"
      }
      {
        name: "meta.declaration.procedure.racket"
        begin: '''
          (?x)
          						(?<=\\()       # preceded by (
          						(define|define-catch)\\s+   # define
          						(\\()          # list of parameters
          						  ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)
          						  ((\\s+
          						    ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])
          						   )*
          						  )\\s*
          						(\\))

        '''
        captures:
          "1":
            name: "support.function.definition.racket"
          "2":
            name: "punctuation.definition.function.racket"
          "3":
            name: "entity.name.function.racket"
          "4":
            name: "variable.parameter.function.racket"
          "7":
            name: "punctuation.definition.function.racket"
        end: "(?=\\))"
        patterns: [
          {
            include: "#comment"
          }
          {
            include: "#sexp"
          }
          {
            include: "#illegal"
          }
        ]
      }
      {
        begin: '''
          (?x)
          						(?<=\\() # preceded by (
          						(lambda|λ)\\s+
          						(\\() # opening paren
          						((?:
          						  ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])
          						  \\s+
          						)*(?:
          						  ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])
          						)?)
          						(\\)) # closing paren

        '''
        captures:
          "1":
            name: "keyword.control.racket"
          "2":
            name: "punctuation.definition.variable.racket"
          "3":
            name: "variable.parameter.racket"
          "6":
            name: "punctuation.definition.variable.racket"
        comment: '''

          						Not sure this one is quite correct.  That \s* is
          						particularly troubling

        '''
        end: "(?=\\))"
        name: "meta.declaration.procedure.racket"
        patterns: [
          {
            include: "#comment"
          }
          {
            include: "#sexp"
          }
        ]
      }
      {
        name: "meta.declaration.variable.racket"
        begin: "(?<=\\()(define)\\s([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)\\s*.*?"
        captures:
          "1":
            name: "support.function.definition.racket"
        "2":
          name: "variable.other.racket"
        end: "(?=\\))"
        patterns: [
          {
            include: "#comment"
          }
          {
            include: "#sexp"
          }
          {
            include: "#string"
          }
        ]
      }
      {
        include: "#quote-sexp"
      }
      {
        include: "#quote"
      }
      {
        include: "#language-functions"
      }
      {
        include: "#string"
      }
      {
        include: "#constants"
      }
      {
        match: "(?<=[\\(\\s])(#\\\\)(space|newline|tab)(?=[\\s\\)])"
        name: "constant.character.named.racket"
      }
      {
        match: "(?<=[\\(\\s])(#\\\\)x[0-9A-F]{2,4}(?=[\\s\\)])"
        name: "constant.character.hex-literal.racket"
      }
      {
        match: "(?<=[\\(\\s])(#\\\\).(?=[\\s\\)])"
        name: "constant.character.escape.racket"
      }
      {
        comment: '''

          						the . in (a . b) which conses together two elements
          						a and b. (a b c) == (a . (b . (c . nil)))

        '''
        match: "(?<=[ ()])\\.(?=[ ()])"
        name: "punctuation.separator.cons.racket"
      }
      {
        name: "meta.function.racket"
        match: "(?<=\\()(\\w[A-Za-z0-9_\\-/]*)\\b"
        captures:
          "1":
            name: "markup.other.function.racket"
      }
      {
        include: "#sexp"
      }
    ]
  string:
    patterns: [
      {
        name: "string.quoted.double.racket"
        begin: "(\")"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.racket"
        end: "(\")"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.racket"
        patterns: [
          {
            match: "\\\\."
            name: "constant.character.escape.racket"
          }
        ]
      }
      {
        name: "string.unquoted.herestring.racket"
        # match: "(?sm)^\\s*#<<(?<label>\\S+)\\s*$.*^\\s*\\g<label>\\s*$"
        # match: "(?m)^\\s*#<<(\\w+)\\s*\\n[\\w\\W\n]*?\\n\\s*\\1\\s*$" <- for some unknown reason doesn't work here
        begin: "^\\s*#<<(\\w+)\\s*$"
        end: "^\\s*\\1\\s*$"
      }
      # {
      #   name: "string.unquoted.herestring.racket"
      #   match: '''
      #     (?xm)
      #       ^.*\\#<<(?<label> [a-z]+ ) .* $
      #       [\\s\\S]*?
      #       ^[ \\t]* \\g<label> [ \\t]*? $
      #   '''
      # }
    ]
